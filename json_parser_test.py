from ast import Pass
import re
import json
from tkinter import E

data_02 = {"lesson":{"showStartDesc":False,"state":"open","minScoreToPass":60,"minScoreToFullStar":90,"responsible":"15-3361-1","name":{"cs":"Asymptotická složitost","en":"<uu5string/>Asymptotic complexity"},"desc":{"cs":"<uu5string/>Dozvíš se, co je to asymptotický odhad složitosti, jak se složitost algoritmu vyjadřuje zápisem.","en":"<uu5string/>You will learn what an asymptotic complexity estimate is and how the complexity of an algorithm is noted."},"startDesc":None,"executivesNote":None,"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=asymptoticEstimationOfDifficulty","itemList":[{"kc":"KC_0003"},{"q":"QC_1574406217633"},{"q":"QC_1574409874074"},{"kc":"KC_1574409198983"},{"q":"QC_1574407202769"},{"q":"QC_1579508404251"},{"q":"QC_1574410666567"},{"q":"QC_1579508957912"},{"q":"QC_1574424911511"}],"image":None,"modifiedBy":"24-3999-1","code":"LC_0003","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-21T10:50:39.194Z","mts":"2021-06-18T06:22:41.518Z","rev":21},"id":"5dd66bff54760a000b3ae4f6"},"questionMap":{"QC_1574406217633":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"answersInOneColumn":False,"responsible":"15-3361-1","label":{"cs":"značení asymptotické složitosti","en":"<uu5string/>Marking of asymptotic complexity"},"successFeedbackText":{"cs":"<uu5string/>Zapisuje se pomocí \n<UU5.Bricks.Link\n  href=\"https://cs.wikipedia.org/wiki/Landauova_notace\"\n  target=\"_blank\"\n>\nLandauovy notace\n</UU5.Bricks.Link>\n (též „Omikron notace“, nebo „velké O notace“) jako <UU5.Math.Expression expression=\"{\\displaystyle O(f(N))}\"/>","en":"<uu5string/>It is marked using the\n<UU5.Bricks.Link\n  href=\"https://cs.wikipedia.org/wiki/Landauova_notace\"\n  target=\"_blank\"\n>\nBig O notation\n</UU5.Bricks.Link>\n as <UU5.Math.Expression expression=\"{\\displaystyle O(f(N))})\"/>.\n"},"errorFeedbackText":None,"resultFeedbackText":{"cs":"<uu5string/>Zapisuje se pomocí \n<UU5.Bricks.Link\n  href=\"https://cs.wikipedia.org/wiki/Landauova_notace\"\n  target=\"_blank\"\n>\nLandauovy notace\n</UU5.Bricks.Link>\n (též „Omikron notace“, nebo „velké O notace“) jako <UU5.Math.Expression expression=\"{\\displaystyle O(f(N))}\"/>","en":"<uu5string/>It is marked using the\n<UU5.Bricks.Link\n  href=\"https://cs.wikipedia.org/wiki/Landauova_notace\"\n  target=\"_blank\"\n>\nBig O notation\n</UU5.Bricks.Link>\n as <UU5.Math.Expression expression=\"{\\displaystyle O(f(N))})\"/>."},"executivesNote":None,"type":"T02","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Виберіть одну з опцій.","sk":"Vyberte jednu z možností."},"task":{"cs":"Jak se zapisuje asymptotická složitost algoritmu?","en":"<uu5string/>How do we mark the asymptotic complexity of an algorithm?"},"answerList":["<uu5string/><UU5.Math.Expression expression=\"O(f(N))\"/>\n","<uu5string/><UU5.Math.Expression expression=\"V(f(N))\"/>","<uu5string/><UU5.Math.Expression expression=\"T(f(N))\"/>","<uu5string/><UU5.Math.Expression expression=\"N(n)\"/>"],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-9903-1","code":"QC_1574406217633","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-22T07:03:37.633Z","mts":"2020-05-14T09:15:41.680Z","rev":4},"id":"5dd7884991aa8b000b56c996"},"QC_1574407202769":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":{"cs":"podle asymptotické složitosti","en":"<uu5string/>Sorting asymptotic complexity"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T08","instruction":{"en":"<uu5string/>Sort in the right order.","cs":"Seřazení prvků.","uk":"Посортуйте в правильному порядку.","sk":"Zoradenie prvkov."},"task":{"cs":"Uspořádejte asymptotické složitosti vzestupně.","en":"<uu5string/>Arrange the asymptotic complexities in ascending order"},"answerList":["<uu5string/><UU5.Math.Expression expression=\"O(n^2)\"/>\n","<uu5string/><UU5.Math.Expression expression=\"O(1)\"/>","<uu5string/><UU5.Math.Expression expression=\"O(log \\space n)\"/>\n","<uu5string/><UU5.Math.Expression expression=\"O(n!)\"/>\n"],"correctAnswerOrder":[1,2,0,3],"image":None,"modifiedBy":"2737-8108-1","code":"QC_1574407202769","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-22T07:20:02.769Z","mts":"2022-02-11T10:01:08.400Z","rev":6},"hiddenQuestion":False,"id":"5dd78c2291aa8b000b56ca75"},"QC_1574409874074":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":{"cs":"Asymptotická složitost pojem","en":"<uu5string/>Asymptotic complexity expression"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T01","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Виберіть одну з опцій.","sk":"Vyberte jednu z možností."},"task":{"cs":"$1 je v podstatě rozdělení algoritmů do tříd složitostí.","en":"<uu5string/>$1 is in fact the division of algorithms into complexity classes"},"answerList":[{"cs":"Asymptotická složitost","en":"<uu5string/>Asymptotic complexity"},{"cs":"Časová složitost","en":"<uu5string/>Time complexity"},{"cs":"Prostorová složitost","en":"<uu5string/>Space complexity"}],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-9903-1","code":"QC_1574409874074","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-22T08:04:34.074Z","mts":"2020-05-14T09:17:46.736Z","rev":3},"id":"5dd7969291aa8b000b56cdae"},"QC_1574410666567":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":{"cs":"const ","en":"<uu5string/>Const"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T11","instruction":{"en":"<uu5string/>Correctly fill the empty spaces.","cs":"Doplňte správně prázdná místa.","sk":"Doplňte správne prázdne miesta","uk":"Правильно заповніть пробіли"},"task":{"cs":"Při konstantní složitosti $1 na množství vstupních dat a čas potřebný pro zpracování bude $2.","en":"<uu5string/>With constant complexity, the amount of input data $1 matter and the processing time will be $2."},"answerList":[[{"cs":"nezáleží ","en":"<uu5string/>does not"},{"cs":"záleží ","en":"<uu5string/>does"}],[{"cs":"stejný","en":"<uu5string/>the same"},{"cs":"různý","en":"<uu5string/>different"}]],"correctAnswerIndexList":[0,0],"image":None,"modifiedBy":"2737-8108-1","code":"QC_1574410666567","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-22T08:17:46.567Z","mts":"2022-02-11T10:02:35.123Z","rev":3},"hiddenQuestion":False,"id":"5dd799aa91aa8b000b56cef6"},"QC_1574424911511":{"state":"open","timeLimit":60,"customTaskStyle":False,"labelAnswers":"noLabels","answerRandom":True,"responsible":"15-3361-1","label":{"cs":"příklady asymptotické složitosti slovní","en":"<uu5string/>Sorting asymptotic complexities"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T09","instruction":{"en":"<uu5string/>Sort in the right order.","cs":"Seřaďte pod sebou.","uk":"Посортуйте в правильному порядку.","sk":"Zoraďte pod sebou."},"task":{"cs":"Uspořádejte asymptotické složitosti vzestupně.","en":"<uu5string/>Arrange asymptotic complexities in ascending order."},"answerList":[{"cs":"kubická","en":"<uu5string/>cubic"},{"cs":"exponenciální","en":"<uu5string/>exponential"},{"cs":"kvadratická","en":"<uu5string/>quadratic"},{"cs":"logaritmická","en":"<uu5string/>logarithmic"}],"correctAnswerOrder":[3,2,0,1],"image":None,"modifiedBy":"2737-8108-1","code":"QC_1574424911511","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-22T12:15:11.511Z","mts":"2022-02-11T10:03:16.638Z","rev":3},"hiddenQuestion":False,"id":"5dd7d14f91aa8b000b56f394"},"QC_1579508404251":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"answersInOneColumn":False,"responsible":"15-3361-1","label":{"cs":"n + 1000 vs. 4 na n","en":"<uu5string/>n + 1000 vs. 4 to n"},"successFeedbackText":{"cs":"<uu5string/>pokud n = 2 => 2 + 1000 = 1002; <UU5.Math.Expression expression=\"4^2 = 16\"/><br/>\npokud n = 3 => 3 + 1000 = 1003; <UU5.Math.Expression expression=\"4^3 = 64\"/>","en":"<uu5string/>if n = 2 => 2 + 1000 = 1002; <UU5.Math.Expression expression=\"4^2 = 16\"/><br/>\nif n = 3 => 3 + 1000 = 1003; <UU5.Math.Expression expression=\"4^3 = 64\"/>"},"errorFeedbackText":None,"resultFeedbackText":{"cs":"<uu5string/>pokud n = 2 => 2 + 1000 = 1002; <UU5.Math.Expression expression=\"4^2 = 16\"/><br/>\npokud n = 3 => 3 + 1000 = 1003; <UU5.Math.Expression expression=\"4^3 = 64\"/>","en":"<uu5string/>if n = 2 => 2 + 1000 = 1002; <UU5.Math.Expression expression=\"4^2 = 16\"/><br/>\nif n = 3 => 3 + 1000 = 1003; <UU5.Math.Expression expression=\"4^3 = 64\"/>"},"executivesNote":None,"type":"T02","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Оберіть один із варіантів.","sk":"Vyberte jednu z možností."},"task":{"cs":"<uu5string/>Mějme algoritmus A s délkou výpočtu <UU5.Math.Expression expression=\"n + 1000\"/> a algorimus B s délkou výpočtu\n<UU5.Math.Expression expression=\"4^n\"/>, kde <UU5.Math.Expression expression=\"n\"/> je počet vstupních dat.\nKterý algoritmus z hlediska časové složitosti je vhodnější pro svou nízkou hodnotu <UU5.Math.Expression expression=\"n\"/> <UU5.Math.Expression expression=\"(n < 5)\"/>?","en":"<uu5string/>Let's have an algorithm A with running time <UU5.Math.Expression expression=\"n + 1000\"/> and an algorithm B with running time\n<UU5.Math.Expression expression=\"4^n\"/>, where <UU5.Math.Expression expression=\"n\"/> is the number of input data.\nWhich algorithm in terms of time complexity is more suitable for its low value <UU5.Math.Expression expression=\"n\"/> <UU5.Math.Expression expression=\"(n < 5)\"/>?"},"answerList":["B","A"],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-3999-1","code":"QC_1579508404251","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-20T08:20:04.251Z","mts":"2021-06-11T08:01:51.503Z","rev":9},"id":"5e2562b40496db002173c809"},"QC_1579508957912":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"answersInOneColumn":False,"responsible":"15-3361-1","label":{"cs":"<uu5string/>n + 1000 vs. 4 na n","en":"<uu5string/>n + 1000 vs. 4 to n"},"successFeedbackText":{"cs":"<uu5string/>pokud n = 20 => 20 + 1000 = 1020; <UU5.Math.Expression expression=\"4^{20} = 1099511627776\"/><br/>\npokud n = 10 => 10 + 1000 = 1010; <UU5.Math.Expression expression=\"4^{10} = 1048576\"/>","en":"<uu5string/>if n = 20 => 20 + 1000 = 1020; <UU5.Math.Expression expression=\"4^{20} = 1099511627776\"/><br/>\nif n = 10 => 10 + 1000 = 1010; <UU5.Math.Expression expression=\"4^{10} = 1048576\"/>"},"errorFeedbackText":None,"resultFeedbackText":{"cs":"<uu5string/>pokud n = 20 => 20 + 1000 = 1020; <UU5.Math.Expression expression=\"4^{20} = 1099511627776\"/><br/>\npokud n = 10 => 10 + 1000 = 1010; <UU5.Math.Expression expression=\"4^{10} = 1048576\"/>","en":"<uu5string/>if n = 20 => 20 + 1000 = 1020; <UU5.Math.Expression expression=\"4^{20} = 1099511627776\"/><br/>\nif n = 10 => 10 + 1000 = 1010; <UU5.Math.Expression expression=\"4^{10} = 1048576\"/>"},"executivesNote":None,"type":"T02","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Оберіть один із варіантів.","sk":"Vyberte jednu z možností."},"task":{"cs":"<uu5string/>Mějme algoritmus A s délkou výpočtu <UU5.Math.Expression expression=\"n + 1000\"/> a algorimus B s délkou výpočtu\n<UU5.Math.Expression expression=\"4^n\"/>, kde <UU5.Math.Expression expression=\"n\"/> je počet vstupních dat.\nKterý algoritmus z hlediska časové složitosti je vhodnější pro hodnoty, kdy <UU5.Math.Expression expression=\"n\"/> je z množiny celých kladných čísel?","en":"<uu5string/>Let's have an algorithm A with running time <UU5.Math.Expression expression=\"n + 1000\"/> and an algorithm B with running time\n<UU5.Math.Expression expression=\"4^n\"/>, where <UU5.Math.Expression expression=\"n\"/> is the number of input data.\nWhich algorithm in terms of time complexity is more suitable for the values, if <UU5.Math.Expression expression=\"n\"/> is from the set of positive integers?"},"answerList":["B","A"],"correctAnswerIndex":1,"image":None,"modifiedBy":"15-3711-1","code":"QC_1579508957912","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-20T08:29:17.912Z","mts":"2021-07-21T14:42:51.127Z","rev":3},"id":"5e2564dd0496db002173ca16"}},"knowledgeCardMap":{"KC_0003":{"state":"open","customTaskStyle":False,"customSolutionStyle":False,"responsible":"15-3361-1","label":{"cs":"asymptoticka slozitost","en":"<uu5string/>Asymptotic complexity"},"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=asymptoticEstimationOfDifficulty","task":{"cs":"Co je to asymptotická složitost?","en":"<uu5string/>What is an asymptotic complexity?"},"solution":{"cs":"<uu5string/><UU5.Bricks.P className=\"left\">\n  <UU5.Bricks.Strong>Asymptotická složitost</UU5.Bricks.Strong> je rozdělení algoritmů do tříd složitostí. \n     U těchto tříd pak platí, že od určité velikosti vstupních dat je daný algoritmus dané třídy vždy pomalejší než algoritmus třídy předchozí. \n  A to bez ohledu na to, je-li některý z počítačů c-násobně výkonnější (kde c je konstanta).\n</UU5.Bricks.P>\n<UuContentKit.Bricks.BlockInfo className=\"left\">\nZapisuje se pomocí \n<UU5.Bricks.Link\n  href=\"https://cs.wikipedia.org/wiki/Landauova_notace\"\n  target=\"_blank\"\n>\nLandauovy notace\n</UU5.Bricks.Link>\n (též „Omikron notace“, nebo „velké O notace“) jako <UU5.Math.Expression expression=\"{\\displaystyle O(f(N))})\"/> (např. <UU5.Math.Expression expression=\"{\\displaystyle O(N)})\"/>. Obvykle se používá asymptotická časová a prostorová složitost.\n</UuContentKit.Bricks.BlockInfo>","en":"<uu5string/><UU5.Bricks.P className=\"left\">\n  <UU5.Bricks.Strong>Asymptotic complexity</UU5.Bricks.Strong> is the division of algorithms into complexity classes. \n     In these classes, from a certain size of input data, the given algorithm of the given class is always slower than the algorithm of the previous class. \n  This is regardless of whether any of the computers is c times more powerful (where c is a constant).\n</UU5.Bricks.P>\n<UuContentKit.Bricks.BlockInfo className=\"left\">\nIt is marked using the\n<UU5.Bricks.Link\n  href=\"https://cs.wikipedia.org/wiki/Landauova_notace\"\n  target=\"_blank\"\n>\nBig O notation\n</UU5.Bricks.Link>\n as <UU5.Math.Expression expression=\"{\\displaystyle O(f(N))})\"/> (f.e. <UU5.Math.Expression expression=\"{\\displaystyle O(N)})\"/>. Asymptotic time and space complexity is usually used.\n</UuContentKit.Bricks.BlockInfo>"},"executivesNote":None,"modifiedBy":"2737-8108-1","code":"KC_0003","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-21T13:40:35.363Z","mts":"2022-02-11T09:57:39.714Z","rev":9},"id":"5dd693d354760a000b3b0f6c"},"KC_1574409198983":{"state":"open","customTaskStyle":False,"customSolutionStyle":True,"responsible":"15-3361-1","label":{"cs":"typické příklady asymptotické složitosti","en":"<uu5string/>Typical examples of asymptotic complexity"},"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=asymptoticEstimationOfDifficulty","task":{"cs":"Které znáte typické příklady asymptotické složitosti?","en":"<uu5string/>What are the typical examples of asymptotic complexity?"},"solution":{"cs":"<uu5string/><UU5.Bricks.P>\n Typické příklady asymptotické složitosti od nejmenší po největší.\n</UU5.Bricks.P>\n<UuContentKit.Tables.Table rowHeader colHeader=False data=\"<uu5json/>[\n  [\n    \\\"<uu5string /><UU5.Bricks.Div>Notace</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Název</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Příklad algoritmu</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(1)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>konstantní</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Skok na prvek v poli dle indexu</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(log \\\\\\space n)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>logaritmická</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Binární vyhledávání</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>lineární</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Hledání prvku v neseřazeném poli</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n^2)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>kvadratická</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Některé řadicí algoritmy (selection sort, insert sort) zpracování matice čísel (součet matic, nulování, transpozice), závislost je na řádu matice</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n^3)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>kubická</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Násobení matic, závislost je na řádu matice</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n^k)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>polynomiální</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Karmarkův algoritmus</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(k^n)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>exponenciální</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Problém obchodního cestujícího pomocí dynamického programování</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n!)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>faktoriálová</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Problém obchodního cestujícího hrubou silou</UU5.Bricks.Div>\\\"\n  ]\n]\"/>","en":"<uu5string/><UU5.Bricks.P>\n Typical examples of asymptotic complexity, from least to most complex.\n</UU5.Bricks.P>\n<UuContentKit.Tables.Table rowHeader colHeader=False data=\"<uu5json/>[\n  [\n    \\\"<uu5string /><UU5.Bricks.Div>Notation</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Name</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Example of the algorithm</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(1)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>constant</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Jump to an element in array by index</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(log \\\\\\space n)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>logarithmic</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Binary search</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>linear</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Search for an element in an unsorted array</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n^2)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>quadratic</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Some sorting algorithms (selection sort, insert sort) processing of a matrix of numbers (sum of matrices, zeroing, transposition), dependent on the order of the matrix</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n^3)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>cubic</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Multiplication of matrices, dependent on the order of the matrix</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n^k)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>polynomial</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Karmarkar's algorithm</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(k^n)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>exponential</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Solving the traveling salesman problem using dynamic programming</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string /><UU5.Math.Expression expression='O(n!)'/>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>factorial</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div>Solving the traveling salesman problem via brute-force search</UU5.Bricks.Div>\\\"\n  ]\n]\"/>"},"executivesNote":None,"modifiedBy":"24-9903-1","code":"KC_1574409198983","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-22T07:53:18.983Z","mts":"2020-05-14T09:42:18.699Z","rev":2},"id":"5dd793ee91aa8b000b56cce4"}},"uuAppProfileList":["StandardUsers"],"uuAppErrorMap":{}}

data_16 = {"lesson":{"showStartDesc":False,"state":"open","minScoreToPass":60,"minScoreToFullStar":90,"responsible":"15-3361-1","name":{"cs":"Kruhové buffery","en":"<uu5string/>Circular buffer"},"desc":{"cs":"<uu5string/>Seznámíš se s datovou strukturou kruhový buffer, z čeho se skládá a základním principem fungování.","en":"<uu5string/>You will learn about the circular buffer data structure, what it consists of and its basic operation principle."},"startDesc":None,"executivesNote":None,"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=67418210","itemList":[{"kc":"KC_1576565978373"},{"q":"QC_1576567310718"},{"kc":"KC_1576567006242"},{"q":"QC_1576567928171"},{"q":"QC_1576568169474"},{"kc":"KC_1576570500876"},{"q":"QC_1576568960185"},{"q":"QC_1576569325717"},{"q":"QC_1576569834014"}],"image":None,"modifiedBy":"24-3999-1","code":"LC_0016","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-21T10:53:53.628Z","mts":"2021-06-18T06:16:37.944Z","rev":17},"id":"5dd66cc154760a000b3ae616"},"questionMap":{"QC_1576567310718":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":{"cs":"kruhovy buffer pojem","en":"<uu5string/>circular buffer term"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T11","instruction":{"en":"Fill correctly empty spaces.","cs":"Doplňte správně prázdná místa.","sk":"Doplňte správne prázdne miesta","uk":"Правильно заповніть пробіли"},"task":{"cs":"Kruhový buffer je implementací $1 nad $2, která se používá především jako vyrovnávací paměť datových toků.","en":"<uu5string/>A circular buffer is an implementation of $1 over $2, which is used mostly as a buffer in data streams."},"answerList":[[{"cs":"fronty (FIFO)","en":"<uu5string/>queue (FIFO)"},{"cs":"zásobníku (LIFO)","en":"<uu5string/>stack (LIFO)"}],[{"cs":"polem ","en":"<uu5string/>array"},{"cs":"spojovým seznamem","en":"<uu5string/>linked list"}]],"correctAnswerIndexList":[0,0],"image":None,"modifiedBy":"24-9903-1","code":"QC_1576567310718","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-12-17T07:21:50.718Z","mts":"2020-06-23T09:27:43.308Z","rev":2},"id":"5df8820eb62b850091795ce3"},"QC_1576567928171":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"answersInOneColumn":False,"responsible":"15-3361-1","label":{"cs":"komponenty kruhoveho bufferu","en":"<uu5string/>circular buffer components"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T03","instruction":{"en":"Choose all of the correct options.","cs":"Vyberte všechny správné možnosti.","uk":"Оберіть всі правильні варіанти.","sk":"Vyberte všetky správne možnosti."},"task":{"cs":"Z čeho se skládá kruhový buffer?","en":"<uu5string/>What does a circular buffer consist of?"},"answerList":[{"cs":"pole fixní délky","en":"<uu5string/>static array"},{"cs":"pole variabilní délky","en":"<uu5string/>dynamic array"},{"cs":"dvou ukazatelů","en":"<uu5string/>two pointers"},{"cs":"jednoho ukazatelů","en":"<uu5string/>one pointer"}],"correctAnswerIndexList":[2,0],"image":None,"modifiedBy":"24-9903-1","answerIsMandatory":True,"code":"QC_1576567928171","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-12-17T07:32:08.171Z","mts":"2020-06-23T09:55:05.586Z","rev":2},"id":"5df88478b62b850091795f8c"},"QC_1576568169474":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"groupAnswers":True,"responsible":"15-3361-1","label":{"cs":"ukazatele kruhoveho bufferu","en":"<uu5string/>circular buffer pointers"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T06","instruction":{"en":"Connect related pairs.","cs":"Spojte související páry.","uk":"Утворіть пари","sk":"Spojte súvisiace páry."},"task":{"cs":"Jaká je funkce jednotlivých ukazatelů v kruhovém bufferu?","en":"<uu5string/>Assign the correct functionalities to pointers."},"answerList":[[{"cs":"<uu5string/>Druhý ukazatel (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>)","en":"<uu5string/>Second pointer (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>)"},{"cs":"<uu5string/>První ukazatel (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>)","en":"<uu5string/>First pointer (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>)"}],[{"cs":"Míří na první obsazený prvek.","en":"<uu5string/>Points to the first element."},{"cs":"Míří na první volné místo v poli.","en":"<uu5string/>Points to the first free index in the array."}]],"pairList":[{"answerIndex":1,"pairAnswerIndex":0},{"answerIndex":0,"pairAnswerIndex":1}],"image":None,"modifiedBy":"24-9903-1","code":"QC_1576568169474","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-12-17T07:36:09.474Z","mts":"2020-06-23T10:11:54.294Z","rev":5},"id":"5df88569b62b8500917960ac"},"QC_1576568960185":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":{"cs":"asymptoticka slozitost","en":"<uu5string/>asymptotic complexity"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T11","instruction":{"en":"Fill correctly empty spaces.","cs":"Doplňte správně prázdná místa.","sk":"Doplňte správne prázdne miesta","uk":"Правильно заповніть пробіли"},"task":{"cs":"Asymptotická složitost výběru a čtení prvku na prvním indexu je  $1 , složitost operace přidání prvku na konec fronty je  $2 .","en":"<uu5string/>The asymptotic complexity of selecting and reading an element on the first index is $1, the complexity of adding an element to the back of the queue is $2."},"answerList":[["<uu5string/>O (1)","<uu5string/>O (n)"],["<uu5string/>O (1)","<uu5string/>O (log n)"]],"correctAnswerIndexList":[0,0],"image":None,"modifiedBy":"24-9903-1","code":"QC_1576568960185","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-12-17T07:49:20.185Z","mts":"2020-06-24T15:35:59.043Z","rev":2},"id":"5df88880b62b8500917964ab"},"QC_1576569325717":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"answersInOneColumn":False,"responsible":"15-3361-1","label":{"cs":"druhy ukazatel kruhoveho bufferu","en":"<uu5string/>second pointer"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T02","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Оберіть один із варіантів.","sk":"Vyberte jednu z možností."},"task":{"cs":"Co se stane, když do bufferu bude přidán nový prvek?","en":"<uu5string/>What happens when a new element is added to the buffer?"},"answerList":[{"cs":"<uu5string/>Druhý ukazatel (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) inkrementuje.","en":"<uu5string/>The second pointer (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) is incremented."},{"cs":"<uu5string/>Druhý ukazatel (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) dekrementuje.","en":"<uu5string/>The second pointer (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) is decremented."},{"cs":"<uu5string/>První ukazatel (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) inkrementuje.","en":"<uu5string/>The first pointer (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) is incremented."},{"cs":"<uu5string/>První ukazatel (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) dekrementuje.","en":"<uu5string/>The first pointer (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) is decremented."}],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-9903-1","code":"QC_1576569325717","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-12-17T07:55:25.717Z","mts":"2020-06-24T15:40:27.182Z","rev":5},"id":"5df889edb62b850091796687"},"QC_1576569834014":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"answersInOneColumn":False,"responsible":"15-3361-1","label":{"cs":"prvni ukazatel kruhoveho bufferu","en":"<uu5string/>first pointer"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T02","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Оберіть один із варіантів.","sk":"Vyberte jednu z možností."},"task":{"cs":"<uu5string/>Co se stane v případě odstranění prvního prvku bufferu?","en":"<uu5string/>What happens when the first element of the buffer is removed?"},"answerList":[{"cs":"<uu5string/>První ukazatel (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) inkrementuje.","en":"<uu5string/>The first pointer (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) is incremented."},{"cs":"<uu5string/>První ukazatel (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) dekrementuje.","en":"<uu5string/>The first pointer (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) is decremented."},{"cs":"<uu5string/>Druhý ukazatel (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) inkrementuje.","en":"<uu5string/>The second pointer (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) is incremented."},{"cs":"<uu5string/>Druhý ukazatel (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) dekrementuje.","en":"<uu5string/>The second pointer (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) is decremented."}],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-9903-1","code":"QC_1576569834014","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-12-17T08:03:54.014Z","mts":"2020-06-24T15:46:36.092Z","rev":4},"id":"5df88beab62b8500917968e2"}},"knowledgeCardMap":{"KC_1576565978373":{"state":"open","customTaskStyle":False,"customSolutionStyle":False,"responsible":"15-3361-1","label":{"cs":"Kruhovy buffer","en":"<uu5string/>Circular buffer"},"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=67418210","task":{"cs":"Co je to kruhový buffer?","en":"<uu5string/>What is a circular buffer?"},"solution":{"cs":"<uu5string/><UU5.Bricks.P>\n <UU5.Bricks.Strong>Kruhový buffer</UU5.Bricks.Strong> (angl. <UU5.Bricks.Em>Circular buffer</UU5.Bricks.Em>)\n je implementací fronty (FIFO) nad polem, která se používá především jako vyrovnávací paměť v datových tocích.\n</UU5.Bricks.P>\n","en":"<uu5string/><UU5.Bricks.P>\n <UU5.Bricks.Strong>A circular buffer</UU5.Bricks.Strong> \n is an implementation of a queue (FIFO) over an array, which is used mostly as a buffer in data streams.\n</UU5.Bricks.P>\n"},"executivesNote":None,"modifiedBy":"24-9903-1","code":"KC_1576565978373","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-12-17T06:59:38.373Z","mts":"2020-06-23T09:25:37.403Z","rev":2},"id":"5df87cdab62b8500917958f7"},"KC_1576567006242":{"state":"open","customTaskStyle":False,"customSolutionStyle":False,"responsible":"15-3361-1","label":{"cs":"komponenty kruhoveho bufferu","en":"<uu5string/>circular buffer components"},"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=67418210","task":{"cs":"Z čeho se skládá kruhový buffer?","en":"<uu5string/>What does a circular buffer consist of?"},"solution":{"cs":"<uu5string/><UU5.Bricks.P>\n Kruhový buffer se skládá z <UU5.Bricks.Strong>pole fixní délky</UU5.Bricks.Strong> a <UU5.Bricks.Strong>dvou ukazatelů</UU5.Bricks.Strong>.\n První z ukazatelů (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) míří na první obsazený prvek, druhý (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) na první volné místo v poli.\n </UU5.Bricks.P>","en":"<uu5string/><UU5.Bricks.P>\n A circular buffer consists of a <UU5.Bricks.Strong>static array</UU5.Bricks.Strong> and <UU5.Bricks.Strong>two pointers</UU5.Bricks.Strong>.\n First pointer (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) points to the first element, and the second (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) to the first free index in the array.\n </UU5.Bricks.P>"},"executivesNote":None,"modifiedBy":"24-9903-1","code":"KC_1576567006242","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-12-17T07:16:46.242Z","mts":"2020-06-23T09:49:59.996Z","rev":11},"id":"5df880deb62b850091795bc9"},"KC_1576570500876":{"state":"open","customTaskStyle":False,"customSolutionStyle":False,"responsible":"15-3361-1","label":{"cs":"+- prvku v kruhovem bufferu","en":"<uu5string/>adding/removing elements"},"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=67418210","task":{"cs":"Jak se provádí přidávaní a odstranění prvku v kruhovém bufferu?","en":"<uu5string/>How do we add and remove elements in the circular buffer?"},"solution":{"cs":"<uu5string/><UU5.Bricks.P className=\"left\">\n V okamžiku, kdy je do bufferu <UU5.Bricks.Strong>přidán nový prvek</UU5.Bricks.Strong>, dojde k inkrementaci druhého ukazatele (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>),\n v případě <UU5.Bricks.Strong>odstranění prvního prvku</UU5.Bricks.Strong> fronty dojde k inkrementaci prvního ukazatele (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>)\n (a k přemazání příslušného paměťového segmentu).\n</UU5.Bricks.P>\n<UuContentKit.Bricks.BlockInfo className=\"left\">\n  Jelikož jsou obě inkrementace prováděny modulárně (pokud je přidáván prvek a konec pole je již obsazen, je prvek přidán na uvolněný začátek pole),\n  struktura bufferu tak tvoří kruh.\n</UuContentKit.Bricks.BlockInfo>\n<UuContentKit.Bricks.BlockInfo className=\"left\">\n  Asymptotická složitost výběru a čtení prvku na prvním indexu je <UU5.Math.Expression expression=\"O(1)\"/>,\n  složitost operace přidání prvku na konec fronty je <UU5.Math.Expression expression=\"O(1)\"/>.\n</UuContentKit.Bricks.BlockInfo>","en":"<uu5string/><UU5.Bricks.P className=\"left\">\n When a <UU5.Bricks.Strong>new element is added</UU5.Bricks.Strong> to the buffer, the second pointer (<UU5.Bricks.Code>EndPointer</UU5.Bricks.Code>) is incremented.\n When the <UU5.Bricks.Strong>first element in a queue is removed</UU5.Bricks.Strong>, the first pointer (<UU5.Bricks.Code>StartPointer</UU5.Bricks.Code>) is incremented\n (and the corresponding memory segment is erased).\n</UU5.Bricks.P>\n<UuContentKit.Bricks.BlockInfo className=\"left\">\n  Since both incrementations are performed modularly (if an element is added and the back of the array is already full, the element is added to the free space in the front of the array),\n  the buffer structure forms a circle.\n</UuContentKit.Bricks.BlockInfo>\n<UuContentKit.Bricks.BlockInfo className=\"left\">\n  The asymptotic complexity of selecting and reading an element on the first index is <UU5.Math.Expression expression=\"O(1)\"/>,\n  the complexity of adding an element to the back of the queue is <UU5.Math.Expression expression=\"O(1)\"/>.\n</UuContentKit.Bricks.BlockInfo>"},"executivesNote":None,"modifiedBy":"24-3999-1","code":"KC_1576570500876","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-12-17T08:15:00.876Z","mts":"2021-06-16T05:04:36.055Z","rev":5},"id":"5df88e84b62b850091796c66"}},"uuAppProfileList":["StandardUsers"],"uuAppErrorMap":{}}

data_029 = {"lesson":{"showStartDesc":False,"state":"open","minScoreToPass":60,"minScoreToFullStar":90,"responsible":"15-3361-1","name":{"cs":"Binární vyhledávací strom","en":"<uu5string/>Binary search tree"},"desc":{"cs":"<uu5string/>Dozvíš se o datové struktuře binary search tree a také ostatních typech BST stromů.","en":"<uu5string/>You will learn about the binary search tree data structure."},"startDesc":None,"executivesNote":None,"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=49251087","itemList":[{"kc":"KC_1580133420630"},{"q":"QC_1580299921052"},{"kc":"KC_1580192592365"},{"q":"QC_1580201957493"},{"q":"QC_1580201828181"},{"kc":"KC_1580200412682"},{"q":"QC_1580204747690"},{"q":"QC_1580202715731"},{"q":"QC_1580210621167"},{"q":"QC_1580205186782"}],"image":None,"modifiedBy":"24-3999-1","code":"LC_0029","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2019-11-21T10:58:07.603Z","mts":"2021-06-18T06:07:25.078Z","rev":27},"id":"5dd66dbf54760a000b3ae886"},"questionMap":{"QC_1580201828181":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerIsMandatory":True,"answerRandom":True,"answersInOneColumn":False,"responsible":"15-3361-1","label":{"cs":"vlastnosti BST","en":"<uu5string/>BST properties"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T03","instruction":{"en":"Choose all of the correct options.","cs":"Vyberte všechny správné možnosti.","uk":"Оберіть всі правильні варіанти.","sk":"Vyberte všetky správne možnosti."},"task":{"cs":"Které vlastnosti platí pro binární vyhledávací strom?","en":"<uu5string/>Which are the properties of a binary search tree?"},"answerList":[{"cs":"<uu5string/>Binární strom má v každém uzlu <UU5.Bricks.U>nejvýše</UU5.Bricks.U> dva potomky.","en":"<uu5string/>Binary tree has <UU5.Bricks.U>at most</UU5.Bricks.U> two children in each node."},{"cs":"<uu5string/>Binární strom má v každém uzlu <UU5.Bricks.U>právě</UU5.Bricks.U> dva potomky.","en":"<uu5string/>Binary tree has <UU5.Bricks.U>exactly</UU5.Bricks.U> two children in each node."},{"cs":"Každý uzel má přiřazený klíč.","en":"<uu5string/>Each node has a key assigned to it."},{"cs":"<uu5string/>Strom může, ale také nemusí umožňovat duplicity.","en":"<uu5string/>The tree may or may not allow duplication."}],"correctAnswerIndexList":[0,2,3],"image":None,"modifiedBy":"24-9903-1","code":"QC_1580201828181","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-28T08:57:08.181Z","mts":"2020-07-23T15:17:17.555Z","rev":3},"id":"5e2ff7645264800019149809"},"QC_1580201957493":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":"unique tree","successFeedbackText":{"cs":"<uu5string/>Pokud strom umožňuje duplicitní prvky, pak je možné ho využít pro implementaci multimnožiny.","en":"<uu5string/>If the tree does allow element duplication, then it can be used for implementing a multiset."},"errorFeedbackText":None,"resultFeedbackText":{"cs":"<uu5string/>Pokud strom umožňuje duplicitní prvky, pak je možné ho využít pro implementaci multimnožiny.","en":"<uu5string/>If the tree does allow element duplication, then it can be used for implementing a multiset."},"executivesNote":None,"type":"T01","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Оберіть один із варіантів.","sk":"Vyberte jednu z možností."},"task":{"cs":"<uu5string/> Pokud strom <UU5.Bricks.U>neumožňuje</UU5.Bricks.U> duplicity, hovoříme o $1.","en":"<uu5string/>If a tree <UU5.Bricks.U>does not allow</UU5.Bricks.U> duplication, we are talking about a $1."},"answerList":[{"cs":"stromu s unikátními hodnotami","en":"<uu5string/>tree with unique values"},{"cs":"multimnožině","en":"<uu5string/>multiset"}],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-9903-1","code":"QC_1580201957493","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-28T08:59:17.493Z","mts":"2020-07-23T14:56:31.504Z","rev":6},"id":"5e2ff7e5526480001914989a"},"QC_1580202715731":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"groupAnswers":True,"responsible":"15-3361-1","label":{"cs":"AVL, R-B TREE, rozvinuty ","en":"<uu5string/>AVL, R-B TREE, rozvinuty --- DOKONČIŤ"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T06","instruction":{"en":"Connect related pairs.","cs":"Spojte související páry.","uk":"Утворіть пари","sk":"Spojte súvisiace páry."},"task":{"cs":"Co je typické pro následující typy stromů?","en":"<uu5string/>Assign each binary search tree type its definition."},"answerList":[[{"cs":"AVL strom","en":"<uu5string/>AVL tree"},{"cs":"Red-black-tree","en":"<uu5string/>Red-black-tree"},{"cs":"Rozvinutý strom","en":"<uu5string/>Developed tree"}],[{"cs":"Automaticky přesouvá často navštěvované vrcholy blíže ke kořeni.","en":"<uu5string/>Automatically moves frequently visited vertices closer to the root."},{"cs":"Používá se nejčastěji pro implementaci asociativního pole.","en":"<uu5string/>Mostly used for implementation of an associative array."},{"cs":"Samovyvažující se binární vyhledávací strom.","en":"<uu5string/>Self-balancing binary search tree."}]],"pairList":[{"answerIndex":0,"pairAnswerIndex":2},{"answerIndex":1,"pairAnswerIndex":1},{"answerIndex":2,"pairAnswerIndex":0}],"image":None,"modifiedBy":"15-3711-1","code":"QC_1580202715731","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-28T09:11:55.731Z","mts":"2021-11-09T11:48:15.946Z","rev":5},"id":"5e2ffadb5264800019149a7c"},"QC_1580204747690":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":"build bst","successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T04","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Оберіть один із варіантів.","sk":"Vyberte jednu z možností."},"task":{"cs":"<uu5string/>Pokud budeme vkládat prvky v následujícím pořadí do binárního vyhledávacího stromu [12, 15, 3, 35, 21, 42, 14], jak poté bude takový strom vypadat?","en":"<uu5string/>If we insert the elements in the following order [12, 15, 3, 35, 21, 42, 14] into a binary search tree, what will the tree look like?"},"answerList":[{"image":"3a32dfd937c87ae643c15f1520ecb3878df1b5019c3553439c8cf58d7de06667","desc":None},{"image":"4caed476961db18fe09dd8c90ab6dcec9bb72da7df60fc51cca52c3242fdafb3","desc":None},{"image":"8e7761188c127a14fb9a52665d6f105fd7c43f3bf33b3066a007ce71dde505b3","desc":None}],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-9903-1","code":"QC_1580204747690","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-28T09:45:47.690Z","mts":"2020-07-23T16:27:16.936Z","rev":2},"id":"5e3002cb526480001914a097"},"QC_1580205186782":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":"build avl-tree","successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T04","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Оберіть один із варіантів.","sk":"Vyberte jednu z možností."},"task":{"cs":"<uu5string/>Pokud budeme vkládat prvky v následujícím pořadí do AVL stromu [12, 15, 3, 35, 21, 42, 14], jak bude poté takový strom vypadat?","en":"<uu5string/>If we insert the elements in the following order [12, 15, 3, 35, 21, 42, 14] into an AVL tree, what will the tree look like?"},"answerList":[{"image":"1bec113b622f17db29566ebf61385142c0deee592adeed154a375f7b5a308d28","desc":None},{"image":"3b9e516b70a3b33d0f361acbe3022660531e352f804a64407e4127e501cd9609","desc":None},{"image":"8e7761188c127a14fb9a52665d6f105fd7c43f3bf33b3066a007ce71dde505b3","desc":None}],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-9903-1","code":"QC_1580205186782","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-28T09:53:06.782Z","mts":"2020-07-24T16:34:00.348Z","rev":3},"id":"5e300482526480001914a369"},"QC_1580210621167":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":{"cs":"tree heap","en":"<uu5string/>tree heap"},"successFeedbackText":None,"errorFeedbackText":None,"resultFeedbackText":None,"executivesNote":None,"type":"T01","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Оберіть один із варіантів.","sk":"Vyberte jednu z možností."},"task":{"cs":"$1 je strom využívající některých vlastností haldy.","en":"<uu5string/>$1 is a binary search tree which is using some properties of a heap."},"answerList":["Tree heap",{"cs":"Splay strom","en":"<uu5string/>Splay tree"},{"cs":"Rozvinutý strom","en":"<uu5string/>Red-black-tree"},{"cs":"AVL strom","en":"<uu5string/>AVL tree"}],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-9903-1","code":"QC_1580210621167","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-28T11:23:41.167Z","mts":"2020-07-24T16:32:13.609Z","rev":3},"id":"5e3019bd526480001914bf23"},"QC_1580299921052":{"state":"open","timeLimit":60,"customTaskStyle":False,"answerRandom":True,"responsible":"15-3361-1","label":{"cs":"cas operace vyhledavani","en":"<uu5string/>time complexity of searching"},"successFeedbackText":{"cs":"<uu5string/>Časová složitost je v nejhorším případě <UU5.Math.Expression expression=\"O (n)\"/>.","en":"<uu5string/>Time complexity in the worst case is <UU5.Math.Expression expression=\"O (n)\"/>."},"errorFeedbackText":None,"resultFeedbackText":{"cs":"<uu5string/>Časová složitost je v nejhorším případě <UU5.Math.Expression expression=\"O (n)\"/>.\n","en":"<uu5string/>Time complexity in the worst case is <UU5.Math.Expression expression=\"O (n)\"/>."},"executivesNote":None,"type":"T01","instruction":{"en":"Choose one of the options.","cs":"Vyberte jednu z možností.","uk":"Оберіть один із варіантів.","sk":"Vyberte jednu z možností."},"task":{"cs":"Průměrná časová složitost operace vyhledávání v binárním vyhledávacím stromu je $1.","en":"<uu5string/>The average time complexity of searching in a binary search tree is $1."},"answerList":["<uu5string/><UU5.Math.Expression expression=\"O (log \\space n)\"/>\n","<uu5string/><UU5.Math.Expression expression=\"O (n)\"/>\n"],"correctAnswerIndex":0,"image":None,"modifiedBy":"24-9903-1","code":"QC_1580299921052","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-29T12:12:01.052Z","mts":"2020-07-23T13:49:36.346Z","rev":3},"id":"5e3176915d3100001985b2c3"}},"knowledgeCardMap":{"KC_1580133420630":{"state":"open","customTaskStyle":False,"customSolutionStyle":False,"responsible":"15-3361-1","label":"BST","studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=49251087","task":{"cs":"Co je to binární vyhledávácí strom (BST)?","en":"<uu5string/>What is a binary search tree (BST)?"},"solution":{"cs":"<uu5string/><UU5.Bricks.P className=\"left\">\n <UU5.Bricks.Strong>Binární vyhledávací strom</UU5.Bricks.Strong> je binární strom, kde jsou jednotlivé uzly uspořádány hierarchicky tak,\n aby bylo splněno určité kritérium. Pro takové kritérium pak platí,\n že všechny uzly menší než daný uzel jsou v levé části jeho podstromu a všechny uzly větší než daný uzel jsou v pravé části jeho podstromu.\n</UU5.Bricks.P>\n<UuContentKit.Tables.Table rowHeader=True colHeader=False data=\"<uu5json/>[\n  [\n    \\\"<uu5string /><UU5.Bricks.Div className='center'>Operace</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div className='center'>Časová složitost průměrná</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div className='center'>Časová složitost v nejhorším případě</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string />Vyhledávání\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (log \\\\\\space n)'/></UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (n)'/></UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string />Přidávaní\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (log \\\\\\space n)'/></UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (n)'/></UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string />Odebírání\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (log \\\\\\space n)'/></UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (n)'/></UU5.Bricks.Div>\\\"\n  ]\n]\"/>","en":"<uu5string/><UU5.Bricks.P className=\"left\">\n <UU5.Bricks.Strong>Binary search tree</UU5.Bricks.Strong> is a binary tree, where the individual nodes are arranged in a hierarchical order\n so that they meet a certain criterium. The criterium is that all nodes smaller than a given node\n are located in the left part of its subtree and all nodes greater than a given node are located in the right part of its subtree.\n</UU5.Bricks.P>\n<UuContentKit.Tables.Table rowHeader=True colHeader=False data=\"<uu5json/>[\n  [\n    \\\"<uu5string /><UU5.Bricks.Div className='center'>Operation</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div className='center'>Average time complexity</UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div className='center'>Time complexity in the worst case</UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string />Searching\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (log \\\\\\space n)'/></UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (n)'/></UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string />Adding\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (log \\\\\\space n)'/></UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (n)'/></UU5.Bricks.Div>\\\"\n  ],\n  [\n    \\\"<uu5string />Removing\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (log \\\\\\space n)'/></UU5.Bricks.Div>\\\",\n    \\\"<uu5string /><UU5.Bricks.Div><UU5.Math.Expression expression='O (n)'/></UU5.Bricks.Div>\\\"\n  ]\n]\"/>"},"executivesNote":None,"modifiedBy":"24-3999-1","code":"KC_1580133420630","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-27T13:57:00.630Z","mts":"2021-06-18T04:40:38.376Z","rev":9},"id":"5e2eec2c5264800019141be0"},"KC_1580192592365":{"state":"open","customTaskStyle":False,"customSolutionStyle":False,"responsible":"15-3361-1","label":{"cs":"BST vlastnosti","en":"<uu5string/>BST properties"},"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=49251087","task":{"cs":"<uu5string/>Jaké základní vlastnosti by měl splňovat každý binární vyhledávací strom?","en":"<uu5string/>What are the basic properties of a binary search tree?"},"solution":{"cs":"<uu5string/><UU5.Bricks.P className=\"left\">\n  Aby byl binární strom vždy efektivním binárním vyhledávacím stromem, je třeba uvažovat o splnění následujících vlastností:\n</UU5.Bricks.P>\n<UU5.Bricks.Ul className=\"left\">\n  <UU5.Bricks.Li>binární strom má v každém uzlu nejvýše dva potomky (levého a pravého),</UU5.Bricks.Li>\n  <UU5.Bricks.Li>každý uzel má přiřazený klíč, kterým je kritérium, podle kterého jsou jednotlivé uzly uspořádány,</UU5.Bricks.Li>\n  <UU5.Bricks.Li>levá část podstromu od rodičovského uzlu obsahuje menší klíče, než je klíč rodičovského uzlu,</UU5.Bricks.Li>\n  <UU5.Bricks.Li>pravá část podstromu od rodičovského uzlu obsahuje větší klíče, než je klíč rodičovského uzlu,</UU5.Bricks.Li>\n  <UU5.Bricks.Li>strom může a také nemusí umožňovat duplicity.</UU5.Bricks.Li>\n</UU5.Bricks.Ul>\n<UuContentKit.Bricks.BlockInfo className=\"left\">\n  Pokud strom neumožňuje duplicity, hovoříme o stromu s unikátními hodnotami a ve své podstatě se pak hodí pro implementaci matematické množiny.\n  Pokud strom umožňuje duplicitní prvky, pak je možné ho využít pro implementaci multimnožiny. \n</UuContentKit.Bricks.BlockInfo>\n","en":"<uu5string/><UU5.Bricks.P className=\"left\">\n  In order for a binary tree to be an always effective binary search tree, the following steps must be completed:\n</UU5.Bricks.P>\n<UU5.Bricks.Ul className=\"left\">\n  <UU5.Bricks.Li>binary tree has at most two children in each node (left and right),</UU5.Bricks.Li>\n  <UU5.Bricks.Li>each node has a key assigned to it, this key represents the criterium according to which the individual nodes are arranged,</UU5.Bricks.Li>\n  <UU5.Bricks.Li>the left subtree contains smaller keys than the key of the parental node,</UU5.Bricks.Li>\n  <UU5.Bricks.Li>the right subtree contains greater keys than the key of the parental node,</UU5.Bricks.Li>\n  <UU5.Bricks.Li>the tree may or may not allow duplication.</UU5.Bricks.Li>\n</UU5.Bricks.Ul>\n<UuContentKit.Bricks.BlockInfo className=\"left\">\n  If the tree does not allow duplication, we are talking about a tree with unique values an it is then suitable for the implementation of a mathematical set.\n  If the tree does allow element duplication, then it can be used for implementing a multiset. \n</UuContentKit.Bricks.BlockInfo>"},"executivesNote":None,"modifiedBy":"24-3999-1","code":"KC_1580192592365","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-28T06:23:12.366Z","mts":"2021-06-18T04:49:38.830Z","rev":6},"id":"5e2fd3505264800019148950"},"KC_1580200412682":{"state":"open","customTaskStyle":False,"customSolutionStyle":False,"responsible":"15-3361-1","label":{"cs":"typy BST","en":"<uu5string/>BST types -- ROZVINUTÝ STROM DOKONČIŤ"},"studyMaterial":"https://uuos9.plus4u.net/uu-bookkitg01-main/ef91ee9fa1fb4eedaeb9911e810ae34d/book/page?code=49251087","task":{"cs":"<uu5string/>Jaké typy binárního vyhledávacího stromu existují?","en":"<uu5string/>What types of binary search tree there are?"},"solution":{"cs":"<uu5string/><UU5.Bricks.Ul className=\"left\">\n  <UU5.Bricks.Li><UU5.Bricks.Strong>AVL strom</UU5.Bricks.Strong> - datová struktura pro uchovávání údajů a jejich vyhledávání.\n  Pracuje v logaritmicky omezeném čase obvykle <UU5.Math.Expression expression=\"O (log \\space n)\"/>.\n  Jedná se o samovyvažující se binární vyhledávací strom.</UU5.Bricks.Li>\n  <UU5.Bricks.Li><UU5.Bricks.Strong>Red-black-tree</UU5.Bricks.Strong> (červeno-černý strom) - strom (tedy datová struktura),\n  který se používá nejčastěji pro implementaci asociativního pole.\n  Jde o strom, který si barví své vrcholy.</UU5.Bricks.Li>\n  <UU5.Bricks.Li><UU5.Bricks.Strong>Rozvinutý strom</UU5.Bricks.Strong> - strom, jehož předností je to,\n  že automaticky přesouvá často navštěvované vrcholy blíže ke kořeni,\n  takže při prohledávání je pak cesta k těmto vrcholům kratší a vyhledávání je rychlejší.</UU5.Bricks.Li>\n  <UU5.Bricks.Li><UU5.Bricks.Strong>Splay strom</UU5.Bricks.Strong> - typ stromu, který je samovyvažovací,\n  nicméně nezavádíme žádnou vyvažovací podmínku, ale definujeme, že kdykoliv pracujeme s nějakým vrcholem,\n  vždy jej přesouváme specifickým způsobem do kořene.</UU5.Bricks.Li>\n  <UU5.Bricks.Li><UU5.Bricks.Strong>Tree heap</UU5.Bricks.Strong> - zkráceně označovaný jako treap, je strom využívající některých vlastností haldy,\n  dalo by se říci, že je to něco mezi stromem a haldou.</UU5.Bricks.Li>\n</UU5.Bricks.Ul>\n","en":"<uu5string/><UU5.Bricks.Ul className=\"left\">\n  <UU5.Bricks.Li><UU5.Bricks.Strong>AVL tree</UU5.Bricks.Strong> - data structure for storing and retrieving data.\n  It works in a logarithmically limited time, usually <UU5.Math.Expression expression=\"O (log \\space n)\"/>.\n  It is a self-balancing binary search tree.</UU5.Bricks.Li>\n  <UU5.Bricks.Li><UU5.Bricks.Strong>Red-black-tree</UU5.Bricks.Strong> - a tree (data structure),\n  which is mostly used for implementation of an associative array.\n  Each node of the tree stores an extra bit representing color.</UU5.Bricks.Li>\n  //* <UU5.Bricks.Li><UU5.Bricks.Strong>Developed tree</UU5.Bricks.Strong> - a tree whose virtue is it automatically moves frequently visited vertices closer to the root, so that the path to those vertices is shorter and the search is faster.</UU5.Bricks.Li> *//\n  <UU5.Bricks.Li><UU5.Bricks.Strong>Splay tree</UU5.Bricks.Strong> - type of self-balancing binary search tree. \n  However, we do not implement any balancing condition, but we define, that whenever we work with a certain element,\n  we rearrange the tree so that the element is placed at the root of the tree.</UU5.Bricks.Li>\n  <UU5.Bricks.Li><UU5.Bricks.Strong>Tree heap</UU5.Bricks.Strong> - shortly treap, is a binary search tree which is using some properties of a heap - \n  we can say, that it is something between a tree and a heap.</UU5.Bricks.Li>\n</UU5.Bricks.Ul>\n"},"executivesNote":None,"modifiedBy":"15-3711-1","code":"KC_1580200412682","awid":"286a85d928da49ebb60816c715ae15dc","sys":{"cts":"2020-01-28T08:33:32.682Z","mts":"2021-11-09T11:47:34.146Z","rev":8},"id":"5e2ff1dc5264800019149234"}},"uuAppProfileList":["StandardUsers"],"uuAppErrorMap":{}}


def parseLessonData(data):
    for i in data.items():
        if i[0] == 'questionMap':
            for j in i[1].items():
                try:
                    print(j[0])

                    task = j[1]['task']['cs']

                    answerList = []
                    pairAnswerList = []
                    correctAnswerIndexes = []
                    correctAnswerOrder = []
                    correctAnswers = []

                    if 'pairList' in j[1].keys():
                        for l in j[1]['pairList']:
                            pairAnswerList.append(l)

                    if 'answerList' in j[1].keys():
                        for k in j[1]['answerList']:
                            # print(type(k))
                            try:
                                if type(k) == dict:
                                    try:
                                        answerList.append(k['cs'])
                                    except:
                                        answerList.append(k)

                                elif type(k) == list:
                                    answerList.append(k)
                                    pass
                                elif type(k) == str:
                                    answerList.append(k)
                                    pass
                                elif type(k) == int:
                                    answerList.append(k)
                                    pass
                            
                            except Exception as e:
                                print(k)
                                print(type(k))
                                raise Exception(f"Unknown type ❌: {e}")
                                pass

                        if type(answerList) == list:
                            for x in pairAnswerList:
                                correctAnswers.append(answerList[0][x['answerIndex']]['cs'] + " -> " + answerList[1][x['answerIndex']]['cs'])
                                pass

                    if 'correctAnswerIndexList' in j[1].keys():
                        for l in j[1]['correctAnswerIndexList']:
                            correctAnswerIndexes.append(l)

                    if 'correctAnswerIndex' in j[1].keys():
                        correctAnswerIndexes.append(j[1]['correctAnswerIndex'])

                    # correctAnswerOrder
                    if 'correctAnswerOrder' in j[1].keys():
                        correctAnswerOrder = j[1]['correctAnswerOrder']

                    # print(answerList)
                    # print(correctAnswerIndexes)

                    # extract correct answers
                    if not pairAnswerList:
                        if len(answerList) > 0:
                            if type(answerList[0]) == list:
                                for x in range(len(correctAnswerIndexes)):
                                    try:
                                        correctAnswers.append(answerList[int(x)][int(correctAnswerIndexes[int(x)])]['cs'])
                                    except Exception as e:
                                        try:
                                            correctAnswers.append(answerList[int(x)][int(correctAnswerIndexes[int(x)])])
                                        except Exception as e:
                                            raise e
                            elif not correctAnswerOrder:
                                for m in correctAnswerIndexes:
                                    correctAnswers.append(answerList[m])
                            else:
                                for m in correctAnswerOrder:
                                    correctAnswers.append(answerList[m])
                        else:
                            correctAnswers.append(True) if correctAnswerIndexes[0] == 0 else correctAnswers.append(False)

                    # remove UU Shit
                    # task = remove_UUshit(task)
                    print(task)

                    for x in correctAnswers:
                        # x = remove_UUshit(str(x))
                        x = x.replace('\n', '') if type(x) == str else x
                        print(f"\t {x}")
                    print('------------------------------------------------------------------------------------------------------------------------------')
                    pass
                except ValueError as e:
                    print(e)
                    pass
            pass
        pass

def remove_UUshit(string):
    uuExp = "UU5.Math.Expression"
    if string.find(uuExp) != -1:
        string = re.sub('<.*?>', '', string)
        string = re.sub('\$\d', '___', string)
    else:
        string.replace('<UU5.Math.Expression expression="', "")
        string.replace('"/>', "")
        string = re.sub('<.*?>', '', string)
        string = re.sub('\$\d', '___', string)
    return string

parseLessonData(data_029)
